[{"/Users/alissonpratesperes/www/aircnc/frontend/src/App.js":"1","/Users/alissonpratesperes/www/aircnc/frontend/src/pages/Dashboard/index.js":"2","/Users/alissonpratesperes/www/aircnc/frontend/src/index.js":"3","/Users/alissonpratesperes/www/aircnc/frontend/src/pages/New/index.js":"4","/Users/alissonpratesperes/www/aircnc/frontend/src/pages/Login/index.js":"5"},{"size":347,"mtime":1610756110181,"results":"6","hashOfConfig":"7"},{"size":3373,"mtime":1610756110189,"results":"8","hashOfConfig":"7"},{"size":149,"mtime":1610757419400,"results":"9","hashOfConfig":"7"},{"size":2508,"mtime":1610756110202,"results":"10","hashOfConfig":"7"},{"size":1198,"mtime":1610756110200,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ka257i",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alissonpratesperes/www/aircnc/frontend/src/App.js",[],"/Users/alissonpratesperes/www/aircnc/frontend/src/pages/Dashboard/index.js",["24","25"],"import React, { useEffect, useState, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport socketio from 'socket.io-client';\r\nimport api from '../../services/api';\r\nimport './styles.css';\r\n    \r\n    export default function Dashboard() {\r\n        const [spots, setSpots] = useState([]);\r\n        const [requests, setRequests] = useState([]);\r\n        const user_id = localStorage.getItem('user');\r\n        const socket = useMemo( () => socketio('http://localhost:3333', { query: { user_id } }), [user_id]);\r\n\r\n            useEffect(() => {\r\n                socket.on('booking_request', data => {\r\n                    setRequests([ ...requests, data ]);\r\n                })\r\n            }, [requests, socket]);\r\n\r\n            useEffect(() => {\r\n                async function loadSpots() {\r\n                    const user_id = localStorage.getItem('user');\r\n                    const response = await api.get('/dashboard', {\r\n                        headers: { user_id }\r\n                    });\r\n                    setSpots(response.data);\r\n                }\r\n                    loadSpots();\r\n            }, []);\r\n\r\n                async function handleAccept(id) {\r\n                    await api.post(`/bookings/${id}/approvals`);\r\n                        setRequests(requests.filter(request => request._id != id));\r\n                }\r\n\r\n                async function handleReject(id) {\r\n                    await api.post(`/bookings/${id}/rejections`);\r\n                        setRequests(requests.filter(request => request._id != id));\r\n                }\r\n\r\n                    return (\r\n                        <>\r\n                            <ul className=\"notifications\">\r\n                                {requests.map( request => (\r\n                                    <li key={request._id}>\r\n                                        <p>\r\n                                            <strong> {request.user.email} </strong> está solicitando uma reserva em <strong> {request.spot.company} </strong> para a data: <strong> {request.date} </strong>\r\n                                                <button className =\"accept\" onClick={() => handleAccept(request._id)}> ACEITAR </button>\r\n                                                <button className=\"reject\" onClick={() => handleReject(request._id)}> REJEITAR </button>\r\n                                        </p>\r\n                                    </li>\r\n                                ) )}\r\n                            </ul>\r\n                            <ul className=\"spot-list\">\r\n                                {spots.map(spot => (\r\n                                    <li key={spot._id}>\r\n                                        <header style={{ backgroundImage: `url(${spot.thumbnail_url})` }}> </header>\r\n                                            <strong> {spot.company} </strong>\r\n                                                <span> { spot.price ? `Diária de R$${ spot.price },00` : 'Diária Gratuita' } </span>\r\n                                    </li>\r\n                                ))}\r\n\r\n                            </ul>\r\n\r\n                                <Link to=\"/new\">\r\n                                    <button className=\"btn\"> Cadastrar Novo Spot </button>\r\n                                </Link>\r\n                        </>\r\n                    );\r\n    }",["26","27"],"/Users/alissonpratesperes/www/aircnc/frontend/src/index.js",[],"/Users/alissonpratesperes/www/aircnc/frontend/src/pages/New/index.js",["28"],"/Users/alissonpratesperes/www/aircnc/frontend/src/pages/Login/index.js",[],{"ruleId":"29","severity":1,"message":"30","line":32,"column":76,"nodeType":"31","messageId":"32","endLine":32,"endColumn":78},{"ruleId":"29","severity":1,"message":"30","line":37,"column":76,"nodeType":"31","messageId":"32","endLine":37,"endColumn":78},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":32,"column":33,"nodeType":"39","endLine":32,"endColumn":76},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]